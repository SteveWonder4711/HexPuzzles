{
    "true_reflection": {
        "name": "True Reflection",
        "directions": [
            0,
            4,
            3,
            1,
            2
        ]
    },
    "false_reflection": {
        "name": "False Reflection",
        "directions": [
            0,
            2,
            3,
            5,
            4
        ]
    },
    "nullary_reflection": {
        "name": "Nullary Reflection",
        "directions": [
            0,
            2
        ]
    },
    "vector_reflection_zero": {
        "name": "Vector Reflection Zero",
        "directions": [
            0,
            5,
            4,
            3,
            2,
            1
        ]
    },
    "vector_reflection_px": {
        "name": "Vector Reflection +X",
        "directions": [
            0,
            5,
            4,
            3,
            2,
            1,
            2,
            0
        ]
    },
    "vector_reflection_nx": {
        "name": "Vector Reflection -X",
        "directions": [
            0,
            1,
            2,
            3,
            4,
            5,
            4,
            2
        ]
    },
    "vector_reflection_py": {
        "name": "Vector Reflection +Y",
        "directions": [
            0,
            5,
            4,
            3,
            2,
            1,
            2,
            2
        ]
    },
    "vector_reflection_ny": {
        "name": "Vector Reflection -Y",
        "directions": [
            0,
            1,
            2,
            3,
            4,
            5,
            4,
            4
        ]
    },
    "vector_reflection_pz": {
        "name": "Vector Reflection +Z",
        "directions": [
            0,
            5,
            4,
            3,
            2,
            1,
            2,
            4
        ]
    },
    "vector_reflection_nz": {
        "name": "Vector Reflection -Z",
        "directions": [
            0,
            1,
            2,
            3,
            4,
            5,
            4,
            0
        ]
    },
    "circle_reflection": {
        "name": "Circle's Reflection",
        "directions": [
            0,
            1,
            5,
            5,
            3,
            4
        ]
    },
    "arc_reflection": {
        "name": "Arc's Reflection",
        "directions": [
            0,
            5,
            1,
            1,
            3,
            2
        ]
    },
    "euler_reflection": {
        "name": "Euler's Reflection",
        "directions": [
            0,
            4,
            2,
            1
        ]
    },
    "additive_distillation": {
        "name": "Additive Distillation",
        "directions": [
            0,
            0,
            4,
            2,
            2
        ]
    },
    "subtractive_distillation": {
        "name": "Subtractive Distillation",
        "directions": [
            0,
            0,
            2,
            4,
            4
        ]
    },
    "multiplicative_distillation": {
        "name": "Multiplicative Distillation",
        "directions": [
            0,
            0,
            4,
            3,
            1,
            1
        ]
    },
    "division_distillation": {
        "name": "Division Distillation",
        "directions": [
            0,
            0,
            2,
            3,
            5,
            5
        ]
    },
    "length_purification": {
        "name": "Length Purification",
        "directions": [
            0,
            0,
            5,
            3,
            2,
            2
        ]
    },
    "power_distillation": {
        "name": "Power Distillation",
        "directions": [
            0,
            0,
            1,
            3,
            4,
            4
        ]
    },
    "floor_purification": {
        "name": "Floor Purification",
        "directions": [
            0,
            1,
            1,
            0
        ]
    },
    "ceiling_purification": {
        "name": "Ceiling Purification",
        "directions": [
            0,
            5,
            5,
            0
        ],
        "offset": 0
    },
    "vector_exaltation": {
        "name": "Vector Exaltation",
        "directions": [
            0,
            1,
            0,
            5,
            4,
            3,
            2
        ],
        "offset": 0,
        "description": "Combine three numbers into a vector"
    },
    "vector_disintegration": {
        "name": "Vector Disintegration",
        "directions": [
            0,
            5,
            0,
            1,
            2,
            3,
            4
        ],
        "offset": 0,
        "description": "Split a vector into its X, Y, and Z components (bottom to top)."
    },
    "modulus_distillation": {
        "name": "Modulus Distillation",
        "directions": [
            0,
            4,
            0,
            2,
            2,
            0,
            4,
            0
        ],
        "offset": 5,
        "description": "Takes the modulus of two numbers"
    },
    "axial_purification": {
        "name": "Axial Purification",
        "directions": [
            0,
            5,
            4,
            3,
            2,
            1,
            5,
            5,
            5
        ],
        "offset": 4
    },
    "entropy_reflection": {
        "name": "Entropy Reflection",
        "directions": [
            0,
            1,
            0,
            5,
            4
        ],
        "offset": 4
    },
    "jesters_gambit": {
        "name": "Jester's Gambit",
        "directions": [
            0,
            4,
            2,
            2,
            4,
            0
        ],
        "offset": 0
    },
    "rotation_gambit": {
        "name": "Rotation Gambit",
        "directions": [
            0,
            4,
            2,
            3,
            1,
            5
        ],
        "offset": 0
    },
    "rotation_gambit_ii": {
        "name": "Rotation Gambit II",
        "directions": [
            0,
            2,
            4,
            3,
            5,
            1
        ],
        "offset": 5
    },
    "gemini_decomposition": {
        "name": "Gemini Decomposition",
        "directions": [
            0,
            4,
            2,
            4,
            2,
            0
        ],
        "offset": 0
    },
    "prospectors_gambit": {
        "name": "Prospector's Gambit",
        "directions": [
            0,
            4,
            2,
            3,
            5,
            1
        ],
        "offset": 0
    },
    "undertakers_gambit": {
        "name": "Undertaker's Gambit",
        "directions": [
            0,
            2,
            4,
            3,
            1,
            5
        ],
        "offset": 0
    },
    "gemini_gambit": {
        "name": "Gemini Gambit",
        "directions": [
            0,
            4,
            2,
            4,
            2,
            0,
            2,
            0,
            4
        ],
        "offset": 0
    },
    "dioscuri_gambit": {
        "name": "Dioscuri Gambit",
        "directions": [
            0,
            4,
            2,
            4,
            2,
            4,
            2,
            0,
            0
        ],
        "offset": 0
    },
    "flocks_reflection": {
        "name": "Flock's Reflection",
        "directions": [
            0,
            5,
            5,
            3,
            4,
            2,
            2,
            1,
            5,
            0,
            4,
            3,
            1
        ],
        "offset": 4
    },
    "fishermans_gambit": {
        "name": "Fisherman's Gambit",
        "directions": [
            0,
            2,
            4,
            2,
            4
        ],
        "offset": 3
    },
    "fishermans_gambit_ii": {
        "name": "Fisherman's Gambit II",
        "directions": [
            0,
            4,
            2,
            4,
            2
        ],
        "offset": 0
    },
    "swindlers_gambit": {
        "name": "Swindler's Gambit",
        "directions": [
            0,
            5,
            3,
            1,
            1,
            3,
            5,
            0
        ],
        "offset": 1
    },
    "augurs_purification": {
        "name": "Augur's Purification",
        "directions": [
            0,
            4,
            4
        ],
        "offset": 5,
        "description": "Convert an argument to a boolean: 0, None and False become False, everything else becomes True"
    },
    "negation_purification": {
        "name": "Negation Purification",
        "directions": [
            0,
            2,
            2
        ],
        "offset": 4,
        "description": "Inverts the boolean argument"
    },
    "disjunction_distillation": {
        "name": "Disjunction Distillation",
        "directions": [
            0,
            0,
            4,
            4
        ],
        "offset": 1,
        "description": "Performs boolean OR"
    },
    "conjunction_distillation": {
        "name": "Conjunction Distillation",
        "directions": [
            0,
            0,
            2,
            2
        ],
        "offset": 5,
        "description": "Performs boolean AND"
    },
    "exclusion_distillation": {
        "name": "Exclusion Distillation",
        "directions": [
            0,
            2,
            2,
            0
        ],
        "offset": 4,
        "description": "Performs boolean XOR"
    },
    "augurs_exaltation": {
        "name": "Augur's Exaltation",
        "directions": [
            0,
            4,
            4,
            0,
            2
        ],
        "offset": 1,
        "description": "If the first argument is True, keep the second and discard the third. Otherwise vice versa"
    },
    "equality_distillation": {
        "name": "Equality Distillation",
        "directions": [
            0,
            4,
            0
        ],
        "offset": 0,
        "description": "If the first two arguments are equal, return True, otherwise False"
    },
    "inequality_distillation": {
        "name": "Inequality Distillation",
        "directions": [
            0,
            2,
            0
        ],
        "offset": 0,
        "description": "If the first two arguments are not equal, return True, otherwise False"
    },
    "maximus_distillation": {
        "name": "Maximus Distillation",
        "directions": [
            0,
            1
        ],
        "offset": 1,
        "description": "If the first argument is greater than the second, return True, otherwise False"
    },
    "minimus_distillation": {
        "name": "Minimus Distillation",
        "directions": [
            0,
            5
        ],
        "offset": 2,
        "description": "If the first argument is lesser than the second, return True, otherwise False"
    },
    "maximus_distillation_ii": {
        "name": "Maximus Distillation II",
        "directions": [
            0,
            1,
            2
        ],
        "offset": 1,
        "description": "If the first argument is greater or equal to the second, return True, otherwise False"
    },
    "minimus_distillation_ii": {
        "name": "Minimus Distillation II",
        "directions": [
            0,
            5,
            4
        ],
        "offset": 2,
        "description": "If the first argument is lenn or equal to the second, return True, otherwise False"
    },
    "selection_distillation": {
        "name": "Selection Distillation",
        "directions": [
            0,
            2,
            3,
            4,
            5,
            1
        ],
        "offset": 4,
        "description": "Remove the number at the top of the stack and get the element indexed by that number from the list on the top of the stack. Return None if out of bounds"
    },
    "selection_exaltation": {
        "name": "Selection Exaltation",
        "directions": [
            0,
            5,
            3,
            4,
            2,
            1,
            1,
            3,
            4,
            0
        ],
        "offset": 4,
        "description": "Remove the two numbers at the top of the stack, replace the list on top with a sublist between those indices, both inclusive"
    },
    "integration_distillation": {
        "name": "Integration Distillation",
        "directions": [
            0,
            1,
            3,
            2,
            4,
            5
        ],
        "offset": 2,
        "description": "IRemove the element on top of the stack and add it to the list on top of the stack"
    },
    "derivation_decomposition": {
        "name": "Derivation Decomposition",
        "directions": [
            0,
            5,
            3,
            4,
            2,
            1
        ],
        "offset": 4,
        "description": "Remove the last element of the list at the top of the stack and add it to the top of the stack."
    },
    "vacant_reflection": {
        "name": "Vacant Reflection",
        "directions": [
            0,
            5,
            4,
            2,
            3,
            1,
            5,
            0
        ],
        "offset": 5,
        "description": "Push an empty list to the top of the stack."
    },
    "singles_purification": {
        "name": "Single's Purification",
        "directions": [
            0,
            4,
            0,
            1,
            2,
            3,
            5
        ],
        "offset": 0,
        "description": "Remove the top of the stack and push a list containing only that element."
    },
    "retrograde_purification": {
        "name": "Retrograde Purification",
        "directions": [
            0,
            5,
            4,
            3,
            1,
            2,
            4,
            5
        ],
        "offset": 0,
        "description": "Reverse the list at the top of the stack"
    },
    "locators_distillation": {
        "name": "Locator's Distillation",
        "directions": [
            0,
            2,
            3,
            5,
            4,
            0,
            1
        ],
        "offset": 0,
        "description": "Remove the top element and list on the stack and push the index of that element in the list, -1 if it does not exist."
    },
    "excisors_distillation": {
        "name": "Excisor's Distillation",
        "directions": [
            0,
            1,
            3,
            2,
            4,
            5,
            5,
            3,
            2,
            0
        ],
        "offset": 2,
        "description": "Remove the number at the top of the stack, then remove the element indexed by the number of the list on the top of the stack."
    },
    "surgeons_exaltation": {
        "name": "Surgeon's Exaltation",
        "directions": [
            0,
            0,
            5,
            3,
            4,
            2,
            1,
            1
        ],
        "offset": 4,
        "description": "Remove the top element and a number from the stack, then set the nth element of the list on top of the stack with that element"
    },
    "flocks_gambit": {
        "name": "Flock's Gambit",
        "directions": [
            0,
            1,
            1,
            3,
            2,
            4,
            4,
            5
        ],
        "offset": 2,
        "description": "Remove a number and then that number many elements from the stack, push a list with all those elements."
    },
    "flocks_disintegration": {
        "name": "Flock's Disintegration",
        "directions": [
            0,
            5,
            5,
            3,
            4,
            2,
            2,
            1
        ],
        "offset": 4,
        "description": "Remove the list at the top of the stack and push each element of it to the stack"
    },
    "speakers_distillation": {
        "name": "Speaker's Distillation",
        "directions": [
            0,
            2,
            4,
            5,
            5,
            0,
            2,
            4
        ],
        "offset": 1,
        "description": "Remove the top element of the stack, add it as the first element to the list on top of the stack."
    },
    "speakers_decomposition": {
        "name": "Speaker's Decomposition",
        "directions": [
            0,
            4,
            2,
            1,
            1,
            0,
            4,
            2
        ],
        "offset": 2,
        "description": "Remove the first element of the list at the top of the stack and push it to the stack."
    }
}